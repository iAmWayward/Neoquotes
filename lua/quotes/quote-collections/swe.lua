return {
  { text = 'TL;DR: There are some great quotes I’ve been collecting.', author = 'Phil Karlton' },
  { text = 'There are only two hard things in Computer Science: cache invalidation and naming things.', author = 'Yaron Minsky' },
  { text = 'Make illegal states unrepresentable.', author = 'Kent Beck' },
  { text = 'First make the change easy (warning: this might be hard), then make the easy change.', author = 'Rebecca Wirfs-Brock' },
  { text = 'Object-oriented programming languages support encapsulation, thereby improving the ability of software to be reused, refined, tested, maintained, and extended. The full benefit of this support can only be realized if encapsulation is maximized during the design process.', author = 'John Romero' },
  { text = 'You might not think that programmers are artists, but programming is an extremely creative profession. It's logic-based creativity.”', author = 'Frederick P. Brooks' },
  { text = 'Good judgement comes from experience, and experience comes from bad judgement.', author = 'Larry Bernstein' },
  { text = 'Don’t automate an undisciplined workflow. The computer won’t solve what the customer’s management can’t.', author = 'Donald Knuth' },
  { text = 'Science is what we understand well enough to explain to a computer. Art is everything else we do.', author = 'David West' },
  { text = 'Object thinking focuses our attention on the problem space rather than the solution space. Object thinkers take the advice of Plato, Parnas, Fred Brooks, Christopher Alexander, and many others by letting the problem define its own solution', author = 'Tom DeMarco' },
  { text = 'Voluminous documentation is part of the problem, not part of the solution.', author = 'Michael Feathers' },
  { text = 'Before you use a method in a legacy system, check to see if there are tests for it. If there aren’t, write them. When you do this consistently, you use tests as a medium of communication.', author = 'Alan Perlis' },
  { text = 'In software systems it is often the early bird that makes the worm.', author = 'Pat Helland' },
  { text = 'Immutability changes everything.', author = 'Martin Fowler' },
  { text = 'The biggest issue on software teams is making sure everyone understands what everyone else is doing.', author = 'Edsger Dijkstra' },
  { text = 'A programming language is a tool that has a profound influence on our thinking habits.', author = 'Bruce Schneier' },
  { text = 'Security is a process, not a product', author = 'David West' },
  { text = 'Object thinking focuses our attention on the problem space rather than the solution space.', author = 'Phil Wadler' },
  { text = 'The essence of XML is this: the problem it solves is not hard, and it does not solve the problem well.', author = 'Norman Augustine' },
  { text = 'Software is like entropy: It is difficult to grasp, weighs nothing, and obeys the Second Law of Thermodynamics; i.e., it always increases.', author = 'Jon Bentley and Douglas McIlroy' },
  { text = 'The key to performance is elegance, not battalions of special cases.', author = 'Robert Martin' },
  { text = 'We comfort ourselves with the belief that if the customers had just been happy with what they said they needed, the design would have been fine. It’s the customer’s fault for changing the requirements on us.', author = 'Jon Ribbens' },
  { text = 'PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil, perpetrated by skilled but perverted professionals.', author = 'R. E. Fairley' },
  { text = 'At any particular point in time, the features provided by our programming languages reflect our understanding of software and programming.', author = 'Chris Pine' },
  { text = 'Programming isn't about what you know; it's about what you can figure out.', author = 'Joel Spolsky' },
  { text = 'In general, the longer you wait before fixing a bug, the costlier (in time and money) it is to fix.', author = 'Kent Beck' },
  { text = 'Nothing is harder than working under a tight deadline and still taking the time to clean up as you go.', author = 'Martin Fowler' },
  { text = 'When I’m studying code, refactoring leads me to higher levels of understanding that I would otherwise miss. Those who dismiss comprehension refactoring as useless fiddling with the code don’t realize they never see the opportunities hidden behind the confusion.', author = 'Andrew Hunt' },
  { text = 'The best way to start fixing a bug is to make it reproducible. After all, if you can’t reproduce it, how will you know if it is ever fixed?', author = 'Emo Philips' },
  { text = 'A computer once beat me at chess, but it was no match for me at kick boxing.', author = 'LeBlanc's Law' },
  { text = 'Later Equals Never.', author = 'Donald Knuth' },
  { text = 'People think that computer science is the art of geniuses but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones.', author = 'Bill Gates' },
  { text = 'Your most unhappy customers are your greatest source of learning.', author = 'Bernard Avishai' },
  { text = 'The danger from computers is not that they will eventually get as smart as men, but that we will meanwhile agree to meet them halfway.', author = 'Venkat Subramaniam' },
  { text = 'A function should follow the "arrow shape" of reading naturally from top to bottom, not wander into deeper nesting like a poorly designed maze.', author = 'Andrew Clark' },
  { text = 'In programming, if someone tells you “you’re overcomplicating it,” they’re either 10 steps behind you or 10 steps ahead of you.', author = 'Gene Spafford' },
  { text = 'The only truly secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guards.', author = 'Andrew Hunt' },
  { text = 'It's not at all important to get it right the first time. It's vitally important to get it right the last time.', author = 'Dan Salomon' },
  { text = 'Sometimes it pays to stay in bed on Monday, rather than spending the rest of the week debugging Monday's code.', author = 'Anonymous' },
  { text = 'Weeks of programming can save you hours of planning.', author = 'Steve McConnell' },
  { text = 'It’s OK to figure out murder mysteries, but you shouldn’t need to figure out code. You should be able to read it.', author = 'Ward Cunningham' },
  { text = 'There is an art to knowing where things should be checked and making sure that the program fails fast if you make a mistake. That kind of choosing is part of the art of simplification.', author = 'Dennie van Tassel' },
  { text = 'I've finally learned what 'upward compatible' means. It means we get to keep all our old mistakes.', author = 'Sidney Markowitz' },
  { text = 'The software isn’t finished until the last user is dead.', author = 'David West' },
  { text = 'An error arises from treating object variables (instance variables) as if they were data attributes and then creating your hierarchy based on shared attributes. Always create hierarchies based on shared behaviors, side.', author = 'Rebecca Wirfs Brooks' },
  { text = 'Information shared by an object might or might not be part of the structure of that object. That is, the object might compute the information, or it might delegate the request for information to another object.', author = 'Gordon Bell' },
  { text = 'The cheapest, fastest and most reliable components of a computer system are those that aren’t there.', author = 'Larry Wall' },
  { text = 'You can prove anything by mentioning another computer language.', author = 'Edsger W. Dijkstra' },
  { text = 'Your obligation is that of active participation. You should not act as knowledge-absorbing sponges, but as whetstones on which we can all sharpen our wits.', author = 'Rick Cook' },
  { text = 'Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the Universe trying to produce bigger and better idiots. So far, the Universe is winning.', author = 'Louis Srygley' },
  { text = 'Without requirements or design, programming is the art of adding bugs to an empty text file.', author = 'Erich Gamma' },
  { text = 'Encapsulate the concept that varies.', author = 'Jeff Atwood' },
  { text = 'Good programmers never write what they can steal or borrow.', author = 'Niels Bohr' },
  { text = 'It is very hard to predict, especially the future.', author = 'Tony Hoare' },
  { text = 'You cannot teach beginners top-down programming, because they don't know which end is up.', author = 'Jacob Kaplan-Moss' },
  { text = 'Code without tests is broken by design.', author = 'Sandi Metz' },
  { text = 'Duplication is far cheaper than the wrong abstraction.', author = 'Leah Culver' },
  { text = 'Learn not to add too many features right away, and get the core idea built and tested.', author = 'Mich Ravera' },
  { text = 'If it doesn’t work, it doesn’t matter how fast it doesn’t work.', author = 'Bertrand Meyer' },
  { text = 'Writing a class without its contract would be similar to producing an engineering component (electrical circuit, VLSI (Very Large Scale Integration) chip, bridge, engine...) without a spec. No professional engineer would even consider the idea.', author = 'Pete Cordell' },
  { text = 'Telling a programmer there's already a library to do X is like telling a songwriter there's already a song about love.', author = 'Rico Mariani' },
  { text = 'A cache with a bad policy is another name for a memory leak.', author = 'Joel Spolsky' },
  { text = 'In a purely functional program, the value of a constant never changes, and yet, it changes all the time! A paradox!', author = 'Isaac Newton' },
  { text = 'If I have seen further than others, it is by standing upon the shoulders of giants.', author = 'Henry Spencer' },
  { text = 'If you lie to the compiler, it will get its revenge.', author = 'Michael Feathers' },
  { text = 'When your code depends on an interface, that dependency is usually very minor and unobtrusive. Your code doesn’t have to change unless the interface changes, and interfaces typically change far less often than the code behind them. When you have an interface, you can edit classes that implement that interface or add new classes that implement the interface, all without impacting code that uses the interface.', author = 'Zhuowei Zhang' },
  { text = 'For this reason, it is better to depend on interfaces or abstract classes than it is to depend on concrete classes. When you depend on less volatile things, you minimize the chance that particular changes will trigger massive recompilation.', author = 'Alan Cooper' },
  { text = 'Never spend 6 minutes doing something by hand when you can spend 6 hours failing to automate it.', author = 'Alan J. Perlis' },
  { text = 'The value of a prototype is in the education it gives you, not in the code itself.', author = 'Salman Arshad' },
  { text = 'When someone says, "I want a programming language in which I need only say what I want done," give him a lollipop.', author = 'Douglas McIlroy' },
  { text = 'Changes in software design will eventually mean "one step forward, two steps back". It is inevitable.', author = 'Richard Hamming' },
  { text = 'The real hero of programming is the one who writes negative code.', author = 'Mario Fusco' },
  { text = 'Mathematicians stand on each others' shoulders and computer scientists stand on each others' toes.', author = 'Alan Kay' },
  { text = 'The code you write makes you a programmer. The code you delete makes you a good one. The code you don't have to write makes you a great one.', author = 'Jack Reeves' },
  { text = 'Simple things should be simple, complex things should be possible.', author = 'Brian Foote and Joseph Yoder' },
  { text = 'Final source code is the real software design.', author = 'Oswald Chambers' },
  { text = 'If you think good architecture is expensive, try bad architecture.', author = 'Rebecca Wirfs-Brock' },
  { text = 'The whole point of getting things done is knowing what to leave undone.', author = 'Wes Dyer' },
  { text = 'Object-oriented programming increases the value of these metrics by managing this complexity. The most effective tool available for dealing with complexity is abstraction. Many types of abstraction can be used, but encapsulation is the main form of abstraction by which complexity is managed in object-oriented programming.', author = 'Niklaus Wirth' },
  { text = 'Make it correct, make it clear, make it concise, make it fast. In that order.', author = 'Erwin Dieterich' },
  { text = 'Indeed, the woes of Software Engineering are not due to lack of tools, or proper management, but largely due to lack of sufficient technical competence.', author = 'Nigel Jacob' },
  { text = 'The last good thing written in C was Franz Schubert's Symphony Number 9.', author = 'Grace Hopper' },
  { text = 'There is absolutely no reason to make computers as stupid as people are.', author = 'Edsger Dijkstra' },
  { text = 'To me programming is more than an important practical art. It is also a gigantic undertaking in the foundations of knowledge.', author = 'Kent Beck' },
  { text = 'The use of COBOL cripples the mind; its teaching should therefore be regarded as a criminal offense.', author = 'Bruce Sterling' },
  { text = 'Optimism is an occupational hazard of programming: feedback is the treatment.', author = 'Bjarne Stroustrup' },
  { text = 'Hackers are arrogant geek romantics. They lack the attentive spirit of inquiry.', author = 'Leslie Lamport' },
  { text = 'If someone claims to have the perfect programming language, he is either a fool or a salesman or both.', author = 'Martin Fowler' },
  { text = 'Thinking is not the ability to manipulate language; it's the ability to manipulate concepts.', author = 'Bill Bryson' },
  { text = 'If you can get today’s work done today, but you do it in such a way that you can’t possibly get tomorrow’s work done tomorrow, then you lose.', author = 'Rich Hickey' },
  { text = 'A computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things. They are, in short, a perfect match.', author = 'Nathaniel S. Borenstein' },
  { text = 'Programming is not about typing, it's about thinking.', author = 'Kyle Simpson' },
  { text = 'The most likely way for the world to be destroyed, most experts agree, is by accident. That's where we come in; we're computer professionals. We cause accidents.', author = 'Seymour Cray' },
  { text = 'There’s nothing more permanent than a temporary hack.', author = 'Michael Feathers' },
  { text = 'The trouble with programmers is that you can never tell what a programmer is doing until it’s too late.', author = 'Arianna Huffington' },
  { text = 'The primary disadvantage of Wrap Method is that it can lead to poor names. In the previous example, we renamed the pay method dispatchPay() just because we needed a different name for code in the original method.', author = 'Robert C. Martin' },
  { text = 'Learning to code is useful no matter what your career ambitions are.', author = 'Boris Beizer' },
  { text = 'Of course bad code can be cleaned up. But it’s very expensive.', author = 'Mark Donner' },
  { text = 'Blaming programmers has been the prevailing approach for a half century of software development: It has not solved the problem yet, so it is time to look in different directions.', author = 'Pamela Zave' },
  { text = '80 percent of my problems are simple logic errors. 80 percent of the remaining problems are pointer errors. The remaining problems are hard.', author = 'Richard Hamming' },
  { text = 'The purpose of software engineering is to control complexity, not to create it.', author = 'Dave Thomas' },
  { text = 'The purpose of computing is insight, not numbers.', author = 'Bram Cohen' },
  { text = 'Write shy code — modules that don't reveal anything unnecessary to other modules and that don't rely on other modules' implementations.', author = 'Bertrand Meyer' },
  { text = 'The trick is to fix the problem you have, rather than the problem you want.', author = 'Sam Redwine' },
  { text = 'Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.', author = 'Erich Gamma' },
  { text = 'Software and cathedrals are much the same. First we build them, then we pray.', author = 'Chris Pine' },
  { text = 'A design that doesn’t take change into account risks major redesign in the future.', author = 'Robert Martin' },
  { text = 'Either way you look at it (DRY or laziness), the idea is the same: make your program flexible. When change comes (and it always does), you'll have a much easier time changing with it.', author = 'Nathan Myhrvold' },
  { text = 'Duplication is the primary enemy of a well-designed system.', author = 'Tony Hoare' },
  { text = 'Software is a gas; it expands to fill its container.', author = 'David Parnas' },
  { text = 'I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.', author = 'Patrick McKenzie' },
  { text = 'One bad programmer can easily create two new jobs a year.', author = 'Edsger W. Dijkstra' },
  { text = 'Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.', author = 'Thomas C. Gale' },
  { text = 'Simplicity is prerequisite for reliability.', author = 'Dan Ingalls' },
  { text = 'Good design adds value faster than it adds cost.', author = 'Butler Lampson' },
  { text = 'Types are essentially assertions about a program. And I think it’s valuable to have things be as absolutely simple as possible, including not even saying what the types are.', author = 'Ralph Johnson' },
  { text = 'Some people are good programmers because they can handle many more details than most people. But there are a lot of disadvantages in selecting programmers for that reason — it can result in programs that no one else can maintain.', author = 'Jason Fried' },
  { text = 'Before software can be reusable it first has to be usable.', author = 'Alan Kay' },
  { text = 'Copying skips understanding. Understanding is how you grow. You have to understand why something works or why something is how it is. When you copy it, you miss that. You just repurpose the last layer instead of understanding all the layers underneath.', author = 'Bertrand Meyer' },
  { text = 'Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.', author = 'Bruce Brown' },
  { text = 'The Scrum idea of a separated Scrum Master is good for Scrum, but not appropriate for most projects. Good development requires not just talkers but doers.', author = 'Donald Knuth' },
  { text = 'Any sufficiently advanced bug is indistinguishable from a feature.', author = 'Ken Thompson' },
  { text = 'Premature optimization is the root of all evil', author = 'Terry Winograd' },
  { text = 'When in doubt, use brute force.', author = 'David Wheeler' },
  { text = 'The main activity of programming is not the origination of new independent programs, but in the integration, modification, and explanation of existing ones.', author = 'Michael R. Fellows' },
  { text = 'Any problem in computer science can be solved with another level of indirection.', author = 'Tony Hoare' },
  { text = 'Computer science is not about machines, in the same way that astronomy is not about telescopes. There is an essential unity of mathematics and computer science.', author = 'Donald E. Knuth' },
  { text = 'There are two ways to write code: write code so simple there are obviously no bugs in it, or write code so complex that there are no obvious bugs in it.', author = 'Linus Torvalds' },
  { text = 'Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.', author = 'Don Norman' },
  { text = 'Bad programmers worry about the code. Good programmers worry about data structures and their relationships.', author = 'Brady Clark' },
  { text = 'Computer scientists have so far worked on developing powerful programming languages that make it possible to solve the technical problems of computation. Little effort has gone toward devising the languages of interaction.', author = 'Neal Ford' },
  { text = 'When the final design seems too simple for the amount of work you've put in, then you know you're done.', author = 'Ken Thompson' },
  { text = 'Developers are drawn to complexity like moths to a flame, frequently with the same result.', author = 'Edsger Dijkstra' },
  { text = 'We have persistant objects, they're called files.', author = 'Milt Bryce' },
  { text = 'I am not terribly dogmatical about the goto statement. I have the uncomfortable feeling that others are making a religion out of it, as if the conceptual problems of programming could be solved by a single trick, by a simple form of coding discipline!', author = 'Albert Szent-Gyorgi' },
  { text = 'No amount of elegant programming or technology will solve a problem if it is improperly specified or understood to begin with.', author = 'Roedy Green' },
  { text = 'Discovery consists of seeing what everyone else has seen and thinking what no one else has thought.', author = 'Chris Pine' },
  { text = 'The longer it takes for a bug to surface, the harder it is to find.', author = 'Gerald M. Weinberg' },
  { text = 'So why was it so hard to tell a computer to do something only mildly complex? Well, it wasn't the "mildly complex" part that was giving me problems; it was the "tell a computer" part.', author = 'Matt Reedy' },
  { text = 'There is no code so big, twisted, or complex that maintenance can't make it worse.', author = 'Charles C. Noble' },
  { text = 'First think about what the ultimate would be. Then take a step away from that, and another, until you get something you can build.', author = 'Paul Graham' },
  { text = 'You must have long-range goals to keep you from being frustrated by short-range failures.', author = 'Tom Love' },
  { text = 'In programming, the hard part isn't solving problems, but deciding what problems to solve.', author = 'Andrew Hunt' },
  { text = 'The key to efficient development is to make interesting new mistakes.', author = 'Edward V Berard' },
  { text = 'The frog just doesn’t notice the change. Don’t be like the frog. Keep an eye on the big picture. Constantly review what’s happening around you, not just what you personally are doing.', author = 'Eric Evans' },
  { text = 'Walking on water and developing software from a specification are easy if both are frozen.', author = 'Mike Garey' },
  { text = 'The Diagram is Not the Model. The model is not the diagram. It is an abstraction, a set of concepts and relationships between them.', author = 'Niklaus Wirth' },
  { text = 'Eighty percent of all input forms ask questions they have no business asking.', author = 'Alan Cooper' },
  { text = 'A primary cause of complexity is that software vendors uncritically adopt almost any feature that users want.', author = 'Ray Ozzie' },
  { text = 'No crisis inside a computer is worth humiliating a human.', author = 'D. Gelernter' },
  { text = 'I love software, because if you can imagine something, you can build it.', author = 'Blaise Pascal' },
  { text = 'Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defense against complexity.', author = 'Alan Turing' },
  { text = 'Small minds are concerned with the extraordinary, great minds with the ordinary.', author = 'Rob Pike' },
  { text = 'Sometimes it is the people no one can imagine anything of who do the things no one can imagine.', author = 'Elon Musk' },
  { text = 'It can be better to copy a little code than to pull in a big library for one function. Dependency hygiene trumps code reuse.', author = 'E. Raymond' },
  { text = 'I think you should always bear in mind that entropy is not on your side.', author = 'Leonard Brandwein' },
  { text = 'Computer Science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.', author = 'Mitch Kapor' },
  { text = 'Beware of programmers who carry screwdrivers.', author = 'Dave Storer' },
  { text = 'Getting information off the Internet is like taking a drink from a fire hydrant.', author = 'Bjarne Stroustrup' },
  { text = 'Don't get suckered in by the comments, they can be terribly misleading: Debug only the code.', author = 'Mary Shaw' },
  { text = 'C++ is designed to allow you to express ideas, but if you don't have ideas or don't have any clue about how to express them, C++ doesn't offer much help.', author = 'Mario Fusco' },
  { text = 'Less than 10% of the code has to do with the ostensible purpose of the system; the rest deals with input-output, data validation, data structure maintenance, and other housekeeping.', author = 'J. Osterhout' },
  { text = 'Programs, like people, get old. We can’t prevent aging, but we can understand its causes, limit its effects and reverse some of the damage.', author = 'Joseph Licklider' },
  { text = 'The best performance improvement is the transition from the nonworking state to the working state.', author = 'Bjarne Stroustrup' },
  { text = 'People tend to overestimate what can be done in one year and to underestimate what can be done in five or ten years.', author = 'Alan Perlis' },
  { text = 'Don't be (too) clever. My point was to discourage overly clever code because "clever code" is hard to write, easy to get wrong, harder to maintain, and often no faster than simpler alternatives because it can be hard to optimize.', author = 'Alan Kay' },
  { text = 'Optimization hinders evolution. Everything should be built top-down, except the first time. Simplicity does not precede complexity, but follows it.', author = 'Ted Nelson' },
  { text = 'Computer science inverts the normal. In normal science, you're given a world, and your job is to find out the rules. In computer science, you give the computer the rules, and it creates the world.', author = 'Boris Beizer' },
  { text = 'The good news is: Anything is possible on your computer. The bad news is: Nothing is easy.', author = 'Daniel Read' },
  { text = 'Bugs lurk in corners and congregate at boundaries.', author = 'Norman Ralph Augustine' },
  { text = 'Take reasonable steps to test, document, and otherwise draw attention to the assumptions made in every module and routine.', author = 'Dennis M. Ritchie' },
  { text = 'Simple systems are not feasible because they require infinite testing.', author = 'Reg Braithwaite' },
  { text = 'C is quirky, flawed, and an enormous success.', author = 'Frederick P. Brooks' },
  { text = 'All programming languages are shit. But the good ones fertilize your mind.', author = 'Lewis D. Eigen' },
  { text = 'Conceptual integrity is the most important consideration in system design.', author = 'C.A.R. Hoare' },
  { text = 'The workers and professionals of the world will soon be divided into two distinct groups. Those who will control computers and those who will be controlled by computers. It would be best for you to be in the former group.', author = 'Donald Knuth' },
  { text = 'Inside every well-written large program is a well-written small program.', author = 'David L. Parnas' },
  { text = 'I can’t be as confident about computer science as I can about biology. Biology easily has 500 years of exciting problems to work on. It’s at that level.', author = 'Bill Gosper' },
  { text = 'We must not forget that the wheel is reinvented so often because it is a very good idea; I've learned to worry more about the soundness of ideas that were invented only once.', author = 'Ada Lovelace' },
  { text = 'A data structure is just a stupid programming language.', author = 'Andrew Hunt' },
  { text = 'The Analytical Engine has no pretensions whatever to originate anything. It can do whatever we know how to order it to perform… But it is likely to exert an indirect and reciprocal influence on science itself.', author = 'Martin Fowler' },
  { text = 'Every craftsman starts his or her journey with a basic set of good-quality tools.', author = 'Frederick P. Brooks' },
  { text = 'Don't worry about design, if you listen to your code a good design will appear...Listen to the technical people. If they are complaining about the difficulty of making changes, then take such complaints seriously and give them time to fix things.', author = 'Wesley Branch Rickey' },
  { text = 'The programmer's primary weapon in the never-ending battle against slow system is to change the intramodular structure. Our first response should be to reorganize the modules' data structures.', author = 'Shigeo Shingo' },
  { text = 'Luck is the residue of design.', author = 'Radia Perlman' },
  { text = 'The most dangerous kind of waste is the waste we do not recognize.', author = 'Brian Goetz' },
  { text = 'Start out with finding the right problem to solve. This is a combination of “what customers are asking for”, “what customers don’t even know they want yet” and “what can be solved with something simple to understand and manage”.', author = 'Wietse Venema' },
  { text = 'It is far easier to design a class to be thread-safe than to retrofit it for thread safety later.', author = 'Nathan Myhrvold' },
  { text = 'Defect-free software does not exist.', author = 'David Heinemeier Hansson' },
  { text = 'If you want to do interesting software, you have to have a bunch of people do it, because the amount of software that one person can do isn't that interesting.', author = 'Eric Ries' },
  { text = 'Just because something is easy to measure doesn't mean it's important.', author = 'John Carmack' },
  { text = 'That which optimizes one part of the system necessarily undermines the system as a whole.', author = 'Steven R Garman' },
  { text = 'If you're willing to restrict the flexibility of your approach, you can almost always do something better.', author = 'John Shore' },
  { text = 'Physics is the universe’s operating system.', author = 'Craig Bruce' },
  { text = 'Good programming is good writing.', author = 'Edsger Dijkstra' },
  { text = 'Temporary solutions often become permanent problems.', author = 'Michael Feathers' },
  { text = 'If we wish to count lines of code, we should not regard them as "lines produced" but as "lines spent".', author = 'Alan J. Perlis' },
  { text = 'Behavior is the most important thing about software. It is what users depend on. Users like it when we add behavior (provided it is what they really wanted), but if we change or remove behavior they depend on (introduce bugs), they stop trusting us.', author = 'Adele Goldberg' },
  { text = 'Adapting old programs to fit new machines usually means adapting new machines to behave like old ones.', author = 'Albert Einstein' },
  { text = 'Don’t ask whether you can do something, but how to do it', author = 'H. W. Kenton' },
  { text = 'If you can't explain it simply, you don't understand it well enough.', author = 'Ron Fein' },
  { text = 'Good engineering is the difference between code running in eight minutes or eight hours. It affects real people in real ways. It's not a "matter of opinion." any more than a bird taking a flight is a "matter of opinion."', author = 'Charles Babbage' },
  { text = 'Design is choosing how you will fail.', author = 'Brian W. Kernighan' },
  { text = 'The whole of arithmetic now appeared within the grasp of mechanism.', author = 'Archibald Putt' },
  { text = '90% of the functionality delivered now is better than 100% delivered never.', author = 'Robert Glass' },
  { text = 'Technology is dominated by two types of people: those who understand what they do not manage, and those who manage what they do not understand.', author = 'David Garlan' },
  { text = 'The most important factor in software work is not the tools and techniques used by the programmers but rather the quality of the programmers themselves.', author = 'David Evans' },
  { text = 'As the size and complexity of software systems increase, the design, specification, and analysis of overall system structure becomes a critical issue.', author = 'Robert Martin' },
  { text = 'I know testers who make good devs. I know devs who make good testers. I know Scrum Masters who make good coffee.', author = 'Atli Björgvin Oddsson' },
  { text = 'Code should be remarkably expressive to avoid most of the comments. There'll be a few exceptions, but we should see comments as an 'failure of expression' until proven wrong.', author = 'Justin Meyer' },
  { text = 'Don’t document the problem, fix it.', author = 'Oscar Godson' },
  { text = 'The secret to building large apps is never build large apps. Break your applications into small pieces. Then, assemble those testable, bite-sized pieces into your big application.', author = 'Michael Hartung' },
  { text = 'One of the best programming skills you can have is knowing when to walk away for awhile.', author = 'Fred Brooks' },
  { text = 'Hardware eventually fails. Software eventually works.', author = 'Karl Pilkington' },
  { text = 'The fundamental problem with program maintenance is that fixing a defect has a substantial chance of introducing another.', author = 'Alberto Brandolini' },
  { text = 'You won't get anything done by planning.', author = 'Joe Armstrong' },
  { text = 'The amount of energy necessary to refute bullshit is an order of magnitude bigger than to produce it.', author = 'Jeff Weiner' },
  { text = 'I think the lack of reusability comes in object-oriented languages, not in functional languages. Because the problem with object-oriented languages is they've got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.', author = 'Carl Sagan' },
  { text = 'Almost without exception, the best products are developed by teams with desire to solve a problem; not a company's need to fulfil a strategy.', author = 'Sam Walton' },
  { text = 'Science is a way of thinking much more than it is a body of knowledge.', author = 'Pete Cordell' },
  { text = 'Most of us don't invent ideas. We take the best ideas from someone else.', author = 'Alan Kay' },
  { text = 'Telling a programmer there's already a library to do X is like telling a songwriter there's already a song about love.', author = 'Orlando Aloysius Battista' },
  { text = 'The flip side of the coin was that even good programmers and language designers tended to do terrible extensions when they were in the heat of programming, because design is something that is best done slowly and carefully.', author = 'Joshua Bloch' },
  { text = 'An error doesn't become a mistake until you refuse to correct it.', author = 'George Orwell' },
  { text = 'Builder pattern is more verbose than the telescoping constructor pattern, so it should be used only if there are enough parameters, say, four or more.', author = 'Daniel T. Ling' },
  { text = 'The greatest enemy of clear language is insincerity.', author = 'Gordon Schulmeyer' },
  { text = 'Complexity is a sign of technical immaturity. Simplicity of use is the real sign of a well design product whether it is an ATM or a Patriot missile.', author = 'Andrew Hunt' },
  { text = 'In a software project team of 10, there are probably 3 people who produce enough defects to make them net negative producers.', author = 'Kevlin Henney' },
  { text = 'We are constantly interfacing with other people's code that might not live up to our high standards and dealing with inputs that may or may not be valid. So we are taught to code defensively. We use assertions to detect bad data and check for consistency.', author = 'Martin Fowler' },
  { text = 'Simplicity before generality, use before reuse.', author = 'Eric Gamma' },
  { text = 'Puzzling over some text to understand what’s going on is a great thing if you’re reading a detective novel, but not when you’re reading code. We may fantasize about being International Men of Mystery, but our code needs to be mundane and clear.', author = 'GeePaw Hill' },
  { text = 'You start digging in the code. The more you dig, the more stuff you turn up. Eventually you dig yourself into a hole you can’t get out of. To avoid digging your own grave, refactoring must be done systematically.', author = 'Edward Tufte' },
  { text = 'We live in a world of misconceptions of thinking knowing syntax is at the heart of the problems. A lot of people believe there's a technical solution to every problem and that it would be best for all us to sit in dark rooms working quietly by ourselves.', author = 'J. Paul Morrison' },
  { text = 'I think it is important for software to avoiding imposing a cognitive style on workers and their work.', author = 'James O. Coplien' },
  { text = 'Do not use humans for jobs computers can do better - this is a waste of human energy and creativity, the only real resource on this planet, and demeans the human spirit.', author = 'Tom Van Vleck' },
  { text = 'Objects are abstractions of processing. Threads are abstractions of schedule.', author = 'Martin Fowler' },
  { text = 'We know about as much about software quality problems as they knew about the Black Plague in the 1600s. We've seen the victims' agonies and helped burn the corpses. We don't know what causes it; we don't really know if there is only one disease. We just suffer -- and keep pouring our sewage into our water supply.', author = 'Alan J. Perlis' },
  { text = 'Temporary variables can be a problem. They are only useful within their own routine, and therefore they encourage long, complex routines.', author = 'Peter Norvig' },
  { text = 'Don't have good ideas if you aren't willing to be responsible for them.', author = 'Tim Peters' },
  { text = 'I think test-driven design is great. But you can test all you want and if you don’t know how to approach the problem, you’re not going to get a solution.', author = 'Alex Lowe' },
  { text = 'Explicit is better than implicit.', author = 'Amir Ghahrai' },
  { text = 'Code generation, like drinking alcohol, is good in moderation.', author = 'Paul Allen' },
  { text = 'No amount of testing can prove a software right, a single test can prove a software wrong.', author = 'Charles Babbage' },
  { text = 'As someone who was basically a software engineer for many years, I became fascinated with how the brain functions and is put together and works in such a different fashion than computers do.', author = 'Peter Deutsch' },
  { text = 'On two occasions, I have been asked [by members of Parliament], "if you put into the machine wrong figures, will the right answers come out?"...I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.', author = 'Douglas Engelbart' },
  { text = 'To iterate is human, to recurse divine', author = 'Andrew Singer' },
  { text = 'These days, the problem isn't how to innovate; it's how to get society to adopt the good ideas that already exist.', author = 'Ada Lovelace' },
  { text = 'The art of debugging is figuring out what you really told your program to do rather than what you thought you told it to do.', author = 'Scott Ambler' },
  { text = 'Forget this world and all its troubles and if possible its multitudinous Charlatans - everything in short but the Enchantress of Numbers.', author = 'E. W. Dijkstra' },
  { text = 'A generalist is a jack-of-all-trades but a master of none, whereas a generalizing specialist is a jack-of-all-trades and master of a few. Big difference.', author = 'Martin Fowler' },
  { text = 'The art of programming is the art of organizing complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible.', author = 'Steve Taylor' },
  { text = 'The programs that live best and longest are those with short functions. You learn just how valuable all those little functions are. All of the payoffs of indirection—explanation, sharing, and choosing—are supported by small functions.', author = 'Robert D. Schneider' },
  { text = 'C++: an octopus made by nailing extra legs onto a dog.', author = 'Carl Sagan' },
  { text = 'While it is a known fact that programmers never make mistakes, it is still a good idea to humor the users by checking for errors at critical points in your program.', author = 'Neal Ford' },
  { text = 'Absence of evidence is not evidence of absence.', author = 'Thomas Fuchs' },
  { text = 'TDD developed code tends to have low cyclomatic complexity .', author = 'Tim Cook' },
  { text = 'The best error message is the one that never shows up.', author = 'Donald Knuth' },
  { text = 'There have been people that suggest that we should have a back door. But the reality is if you put a back door in, that back door's for everybody - for good guys and bad guys.', author = 'John Johnson' },
  { text = 'The designer of a new system must not only be the implementor and the first large-scale user; the designer should also write the first user manual. If I had not participated fully in all these activities, literally hundreds of improvements would never have been made.', author = 'Adam Tornhill' },
  { text = 'First, solve the problem. Then, write the code.', author = 'Alan Kay' },
  { text = 'Even when a module is old and stable, bad code may be a time bomb and we might defuse it by isolating that code in its own library', author = 'Andy Hunt' },
  { text = 'I like to say that in the old days, if you reinvented the wheel, you would get your wrist slapped for not reading. But nowadays people are reinventing the flat tire. I'd personally be happy if they reinvented the wheel, because at least we'd be moving forward.', author = 'Steve McConnell' },
  { text = 'Be careful to preserve the orthogonality of your system as you introduce third-party toolkits and libraries. Choose your technologies wisely.', author = 'R. Tennant' },
  { text = 'It’s better to wait for a productive programmer to become available than it is to wait for the first available programmer to become productive.', author = 'Terry Winograd' },
  { text = 'A programming language is a system of notation for describing computations. A useful programming language must therefore be suited for both description (i.e., for human writers and readers of programs) and for computation (i.e., for efficient implementation on computers). But human beings and computers are so different that it is difficult to find notational devices that are well suited to the capabilities of both.', author = 'George Box' },
  { text = 'The main activity of programming is not the origination of new independent programs, but in the integration, modification, and explanation of existing ones.', author = 'Bill Gates' },
  { text = 'All models are wrong but some models are useful', author = 'Seymour Papert' },
  { text = 'The best way to prepare is to write programs, and to study great programs that other people have written. In my case, I went to the garbage cans at the Computer Science Center and fished out listings of their operating system.', author = 'Sakichi Toyoda' },
  { text = 'BASIC is to computer programming as QWERTY is to typing.', author = 'Henry Samueli' },
  { text = 'Before you say you can’t do something, try it.', author = 'Damian Conway' },
  { text = 'Anytime you put a challenge out there, people come up with a creative solution on the software side.', author = 'Richard A. Moran' },
  { text = 'Programmers have to fight against the two most destructive forces in the universe: entropy and stupidity.', author = 'Joshua Bloch' },
  { text = 'Simplify, don’t complicate – especially processes, procedures and policies.', author = 'John O'Nolan' },
  { text = 'When in doubt, leave it out.', author = 'Neal Ford' },
  { text = 'It's a lot easier to talk about code than it is to write code.', author = 'Douglas Crockford' },
  { text = 'Architecture is the tension between coupling and cohesion.', author = 'Linus Torvalds' },
  { text = 'JavaScript is the only language that I'm aware of that people feel they don't need to learn before they start using it.', author = 'Grace Hopper' },
  { text = 'This ‘users are idiots, and are confused by functionality’ mentality of Gnome is a disease. If you think your users are idiots, only idiots will use it.', author = 'Bertrand Meyer' },
  { text = 'In pioneer days they used oxen for heavy pulling, and when one ox couldn't budge a log, they didn't try to grow a larger ox. We shouldn't be trying for bigger computers, but for more systems of computers.', author = 'Kent Beck' },
  { text = 'The role of a trainer or consultant is to empower the customer, not to make himself indispensable.', author = 'Vint Cerf' },
  { text = 'At some point software design becomes less about what and more about when.', author = 'Rod Michael' },
  { text = 'Writing software is a very intense, very personal thing. You have to have time to work your way through it, to understand it. Then debug it.', author = 'Larry Niven' },
  { text = 'If you automate a mess, you get an automated mess.', author = 'Anthony J. D'Angelo' },
  { text = 'That's the thing about people who think they hate computers. What they really hate is lousy programmers.', author = 'Alan J. Perlis' },
  { text = 'When solving problems, dig at the roots instead of just hacking at the leaves.', author = 'Dave Farley' },
  { text = 'Syntactic sugar causes cancer of the semicolon.', author = 'Michael A. Jackson' },
  { text = 'Iteration allows us to progressively approach some goal. We can discard the steps that take us further away and prefer the steps that move us nearer. This is in essence how evolution works. It is also at the heart of how modern machine learning (ML) works.', author = 'Archibald McLeish' },
  { text = 'The best programmers write only easy programs.', author = 'R. Feynman' },
  { text = 'There is only one thing more painful than learning from experience, and that is not learning from experience.', author = 'Mark Minasi' },
  { text = 'Precise language is not the problem. Clear language is the problem.', author = 'Robert C. Martin' },
  { text = 'If Mc Donalds were run like a software company, one out of every hundred Big Macs would give you food poisoning — and the response would be, “We’re sorry, here’s a coupon for two more.', author = 'Mitch Ratcliffe' },
  { text = 'Encoded names are seldom pronounceable and are easy to miss-type.', author = 'Niklaus Wirth' },
  { text = 'A computer lets you make more mistakes faster than any other invention with the possible exceptions of handguns and Tequila.', author = 'Tim Kadlec' },
  { text = 'Many people tend to look at programming styles and languages like religions: if you belong to one, you cannot belong to others. But this analogy is another fallacy.', author = 'Martin Fowler' },
  { text = 'Blame the implementation, not the technique.', author = 'Mario Fusco' },
  { text = 'Design activities certainly do take up time and effort, but they payoff because they make it easier to evolve the software into the future. You can save short-term time by neglecting design, but this accumulates TechDebt, which will slow your productivity later.', author = 'Andy Hunt' },
  { text = 'Promoting a good developer to management is often a twofold bad move: you'll lose a good developer and get a poor manager.', author = 'Benjamin Franklin' },
  { text = 'Most developers hate testing. They tend to test gently, subconsciously knowing where the code will break and avoiding the weak spots. Pragmatic Programmers are different. We are driven to find our bugs now, so we don’t have to endure the shame of others finding our bugs later.', author = 'Antoine de Saint-Exupery' },
  { text = 'Tell me and I forget. Teach me and I remember. Involve me and I learn.', author = 'Jeff Pesis' },
  { text = 'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.', author = 'Hannes Alfven' },
  { text = 'Hardware: the parts of a computer system that can be kicked.', author = 'Roy Carlson' },
  { text = 'We have to learn again that science without contact with experiments is an enterprise which is likely to go completely astray into imaginary conjecture.', author = 'Martin Fowler' },
  { text = 'The sooner you start to code, the longer the program will take.', author = 'Albert Einstein' },
  { text = 'Comprehensiveness is the enemy of comprehensibility.', author = 'Alan Turing' },
  { text = 'Imagination is more important than knowledge. For knowledge is limited, whereas imagination embraces the entire world, stimulating progress, giving birth to evolution.', author = 'Bill Curtis' },
  { text = 'A computer would deserve to be called intelligent if it could deceive a human into believing that it was human.', author = 'Bruce Schneier' },
  { text = 'In a room full of top software designers, if two agree on the same thing, that's a majority.', author = 'Jordan W' },
  { text = 'Complexity is the worst enemy of security, and our systems are getting more complex all the time.', author = 'John Moore' },
  { text = 'Good engineers make solutions obsolete. Great engineers make themselves obsolete.', author = 'Richard Feynman' },
  { text = 'He who hasn't hacked assembly language as a youth has no heart. He who does as an adult has no brain.', author = 'Tony Hoare' },
  { text = 'Computer science is like engineering; it is all about getting something to do something, rather than just dealing with abstractions, as in the pre-Smith geology.', author = 'Jessica Kerr' },
  { text = 'My real criticism with Null is that it brings back again unnecessarily all the agony of having to choose whether to run your program fast without checking or run it slow with checking.', author = 'Bruce Schneier' },
  { text = 'A Fallacy of Software: If it works, and we don't change anything, it will keep working.', author = 'James A. Ward' },
  { text = 'The strength of a cryptographic system depends entirely on the strength of its weakest component.', author = 'Alan J. Perlis' },
  { text = 'Quality is the ally of schedule and cost, not their adversary. If we have to sacrifice quality to meet schedule, it's because we are doing the job wrong from the very beginning.', author = 'Mitch Kapor' },
  { text = 'Symmetry is a complexity-reducing concept (co-routines include subroutines); seek it everywhere.', author = 'Dave Farley' },
  { text = 'The critical thing in developing software is not the program, it's the design. It is translating understanding of user needs into something that can be realized as a computer program.', author = 'Paul Ford' },
  { text = 'A human organization is just as much an information system as any computer system. It is almost certainly more complex, but the same fundamental ideas apply. Things that are fundamentally difficult, like concurrency and coupling, are difficult in the real world of people, too.', author = 'Jeff Atwood' },
  { text = 'Programmers are often angry because they’re often scared.', author = 'Bill Gates' },
  { text = 'The best reaction to “this is confusing, where are the docs” is to rewrite the feature to make it less confusing, not write more docs.', author = 'Frederick P. Brooks' },
  { text = 'Software is a great combination between artistry and engineering.', author = 'C.A.R Hoare' },
  { text = 'There is no single development, in either technology or management technique, which by itself promises even one order-of-magnitude improvement within a decade in productivity, in reliability, in simplicity.', author = 'Kent Beck' },
  { text = 'The most important property of a program is whether it accomplishes the intention of its user.', author = 'Michael A. Jackson' },
  { text = 'Tests are the Programmer’s stone, transmuting fear into boredom.', author = 'Michael Crichton' },
  { text = 'Rules of Optimization: Rule 1: Don't do it. Rule 2 (for experts only): Don't do it yet.', author = 'Dave Moon' },
  { text = 'This fascination with computer models is something I understand very well. Richard Feynman called it a disease. I fear he is right.', author = 'Bob Gray' },
  { text = 'Language designers are not intellectuals. They're not as interested in thinking as you might hope. They just want to get a language done and start using it.', author = 'Larry Wall' },
  { text = 'Writing in C or C++ is like running a chain saw with all the safety guards removed.', author = 'Paul Leary' },
  { text = 'Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris.', author = 'Boris Beizer' },
  { text = 'That’s what’s cool about working with computers. They don’t argue, they remember everything, and they don’t drink all your beer.', author = 'Jon Evans' },
  { text = 'A good threat is worth a thousand tests.', author = 'Robert Martin' },
  { text = 'Traditional technical interviews are terrible for everyone. They're a bad way for companies to evaluate candidates. They're a bad way for candidates to evaluate companies. They waste time and generate stress on both sides.', author = 'Guy Steele' },
  { text = 'Architecture is just regular software design.', author = 'Bill Harlan' },
  { text = 'Good programmers don't just write programs. They build a working vocabulary.', author = 'Kent Beck' },
  { text = 'It is easier to optimize correct code than to correct optimized code.', author = 'Niklaus Wirth' },
  { text = 'The world is changing, and I believe that, if I want to stay employed as a programmer, I'm going to have to change with it.', author = 'Charles Forsyth' },
  { text = 'Program construction consists of a sequence of refinement steps.', author = 'Earl MacCormac' },
  { text = 'Most xml i’ve seen makes me think i’m dyslexic. it also looks constipated, and two health problems in one standard is just too much.', author = 'John Osterhout' },
  { text = 'Explanations without metaphor would be difficult if not impossible, for in order to describe the unknown, we must resort to concepts that we know and understand, and that is the essence of metaphor.', author = 'Alex Engelberg' },
  { text = 'A program that produces incorrect results twice as fast is infinitely slower.', author = 'Alan Kay' },
  { text = 'Programming is just saying “I have a meeting in an hour, so better not start on this yet” to yourself until you die.', author = 'Wietse Venema' },
  { text = 'Technology is anything invented after you were born.', author = 'Steve Jobs' },
  { text = 'Most of the effort in the software business goes into the maintenance of code that already exists.', author = 'Alan Perlis' },
  { text = 'Technology is nothing. What's important is that you have a faith in people, that they're basically good and smart, and if you give them tools, they'll do wonderful things with them.', author = 'Kent Beck' },
  { text = 'A year spent in artificial intelligence is enough to make one believe in God.', author = 'Tom Duff' },
  { text = 'Criticism isn't just disliking things. Arts schools teach the skill & the respect for the work. Computer science schools don't.', author = 'John Resig' },
  { text = 'Whenever possible, steal code.', author = 'Konrad Zuse' },
  { text = 'Write code every day.', author = 'Tony Hoare' },
  { text = 'The danger of computers becoming like humans is not as great as the danger of humans becoming like computers.', author = 'Gina Sipley' },
  { text = 'An ultimate joint challenge for the biological and the computational sciences is the understanding of the mechanisms of the human brain, and its relationship with the human mind.', author = 'Larry Wall' },
  { text = 'Those hours of practice, and failure, are a necessary part of the learning process.', author = 'Andrew Hunt' },
  { text = 'The problem with using C++... is that there's already a strong tendency in the language to require you to know everything before you can do anything.', author = 'Tim Bryce' },
  { text = 'Great software today is often preferable to perfect software tomorrow.', author = 'Eric Evans' },
  { text = 'If the mind really is the finest computer, then there are a lot of people out there who need to be rebooted.', author = 'Alan Cooper' },
  { text = 'A model is a selectively simplified and consciously structured form of knowledge.', author = 'Michael Abrash' },
  { text = 'The payoff of a customer-centric approach to software and digital product design is substantial and long-lasting for both companies and their customers.', author = 'Albert Einstein' },
  { text = 'After you finish the first 90% of a project, you have to finish the other 90%.', author = 'Mark Twain' },
  { text = 'You do not really understand something unless you can explain it to your grandmother.', author = 'David West' },
  { text = 'God could create the world in six days because he didn't have to make it compatible with the previous version.', author = 'David West' },
  { text = 'GoF patterns might better be called implementation patterns than design (or thinking) patterns.', author = 'T. DeMarco and T. Lister' },
  { text = 'Thinking like an object will lead to a greater degree of isomorphism between objects found in the problem space (the enterprise domain) and those employed in a solution space (the computer program) than thinking like a computer.', author = 'Brian W. Kernighan' },
  { text = 'The danger of standard process is that people will miss chances to take important shortcuts.', author = 'Brian W. Kernighan' },
  { text = 'Controlling complexity is the essence of computer programming.', author = 'Dave Farley' },
  { text = 'The most effective debugging tool is still careful thought, coupled with judiciously placed print statements.', author = 'Reg Braithwaite' },
  { text = 'Feedback is essential to our ability to learn. Without fast, effective feedback, we are guessing. Both the speed and the quality of feedback matter. If feedback is too late, it is useless. If it is misleading or wrong, the decisions that we make will be wrong, too', author = 'John Carmack' },
  { text = 'The strength of JavaScript is that you can do anything. The weakness is that you will.', author = 'Edwards Deming' },
  { text = 'One of the big lessons of a big project is you don't want people that aren't really programmers programming, you'll suffer for it!', author = 'Alfred North Whitehead' },
  { text = 'Defects are not free. Somebody makes them, and gets paid for making them.', author = 'Otis Port' },
  { text = 'By relieving the brain of all unnecessary work, a good notation sets it free to concentrate on more advanced problems, and in effect increases the mental power of the race. Before the introduction of the Arabic notation, multiplication was difficult, and division even of integers called into play the highest mathematical faculties. Our modern power of easy reckoning with decimal fractions is the almost miraculous result of the gradual discovery of a perfect notation.', author = 'Eric Evans' },
  { text = 'Programmers regard themselves as artists. As such they consider keeping accurate records of their handwork on par with washing ashtray.', author = 'Bertrand Meyer' },
  { text = 'The heart of software is its ability to solve domain-related problems for its user. All other features, vital though they may be, support this basic purpose.', author = 'Ken Olsen' },
  { text = 'Incorrect documentation is often worse than no documentation.', author = 'Edward Garson' },
  { text = 'Teamwork was more accepted 40 years ago.', author = 'Edsger Dijkstra' },
  { text = 'Referential transparency is a very desirable property: it implies that functions consistently yield the same results given the same input, irrespective of where and when they are invoked.', author = 'Jon Evans' },
  { text = 'If debugging is the process of removing software bugs, then programming must be the process of putting them in.', author = 'Yegor Bugayenko' },
  { text = 'I've been a software engineer, a novelist, a journalist, and a manager - and managing developers is easily the trickiest thing I've ever done.', author = 'Alan Perlis' },
  { text = 'We must not blame programmers for their bugs. They belong to them only until the code is merged to the repository. After that, all bugs are ours!', author = 'Gerald M. Weinberg' },
  { text = 'It is easier to change the specification to fit the program than vice versa.', author = 'Gavin Russell Baker' },
  { text = 'Documentation is the castor oil of programming', author = 'Charlie Gibbs' },
  { text = 'C++ : Where friends have access to your private members.', author = 'Bob Martin' },
  { text = 'Errors have occurred. We won't tell you where or why. Lazy programmers.', author = 'Alan J Perlis' },
  { text = 'What would happen if you allowed a bug to slip through a module, and it cost your company $10,000? The nonprofessional would shrug his shoulders, say “stuff happens,” and start writing the next module. The professional would write the company a check for $10,000!', author = 'David West' },
  { text = 'I hope the field of computer science never loses its sense of fun.', author = 'Kent Beck' },
  { text = 'The “naive” or “natural” expectations of objects represent a kind of integrity—what Alan Kay called a user illusion—that must be respected.', author = 'Roberto Waltman' },
  { text = 'Tests should be coupled to the behavior of code and decoupled from the structure of code', author = 'Marcus Cicero' },
  { text = 'In the one and only true way. The object-oriented version of 'Spaghetti code' is, of course, 'Lasagna code'. (Too many layers).', author = 'Robert C. Martin' },
  { text = 'Any man can make mistakes, but only an idiot persists in his error.', author = 'Addy Osmani' },
  { text = 'One difference between a smart programmer and a professional programmer is that the professional understands that clarity is king. Professionals use their powers for good and write code that others can understand.', author = 'Edsger Wybe Dijkstra' },
  { text = 'First do it, then do it right, then do it better.', author = 'David Farley' },
  { text = 'Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.', author = 'Edwards Deming' },
  { text = 'Feedback is essential to our ability to learn. Without fast, effective feedback, we are guessing. Both the speed and the quality of feedback matter. If the feedback is too late, it is useless. If it is misleading or wrong, the decisions that we make on its basis will be wrong, too', author = 'Ed Yourdon' },
  { text = 'A person without data is just another person with an opinion', author = 'Dave Farley' },
  { text = 'Dijkstra will be happy to tell you that 95% of computer science faculty members can't program a binary search correctly, which doesn't give us much hope for the students they teach.', author = 'John Carmack' },
  { text = 'In software “production” is not our problem! Our product is a sequence of bytes, and we can recreate any sequence of bytes essentially for zero cost. This means that we NEVER have a production problem!', author = 'Ed Yourdon' },
  { text = 'Programming is not a zero-sum game. Teaching something to a fellow programmer doesn’t take it away from you.', author = 'Said Ouissal' },
  { text = 'There is nothing in the programming field more despicable than an undocumented program.', author = 'Martin Golding' },
  { text = 'Assumptions are the mother of all failures.', author = 'Mike Haertel' },
  { text = 'If you have to spend effort to decipher code, you should rewrite it.', author = 'Alan Kay' },
  { text = 'The key to making programs fast is to make them do practically nothing.', author = 'Bjarne Stroustrup' },
  { text = 'The last thing you wanted any programmer to do is mess with internal state', author = 'C. A. R. Hoare' },
  { text = 'More good code has been written in languages denounced as “bad” than in languages proclaimed “wonderful” — much more.', author = 'Alexander Atanasov' },
  { text = 'There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.', author = 'Matt Mullenweg' },
  { text = 'The computers do what you tell them to do, not what you want them to do.', author = 'Craig Zerouni' },
  { text = 'When I first got into technology I didn't really understand what open source was. Once I started writing software, I realized how important this would be.', author = 'Jose M. Aguilar' },
  { text = 'If you have too many special cases, you are doing it wrong.', author = 'Steve Jobs' },
  { text = 'If you think you are worth what you know, you are very wrong. Your knowledge today does not have much value beyond a couple of years. Your value is what you can learn and how easily you can adapt to the changes this profession brings so often.', author = 'Paul Graham' },
  { text = 'Innovation distinguishes between a leader and a follower.', author = 'Mark Gibbs' },
  { text = 'A programming language is for thinking about programs, not for expressing programs you've already thought of. It should be a pencil, not a pen.', author = 'Michael T. Nygard' },
  { text = 'No matter how slick the demo is in rehearsal, when you do it in front of a live audience the probability of a flawless presentation is inversely proportional to the number of people watching, raised to the power of the amount of money involved.', author = 'Nicholas Negroponte' },
  { text = 'Bugs will happen. They cannot be eliminated, so they must be survived instead.', author = 'Jim Rohn' },
  { text = 'If programmers got paid to remove code from software instead of writing new code, software would be a whole lot better.', author = 'Alan Kay' },
  { text = 'Formal education will make you a living. Self-education will make you a fortune.', author = 'Kent Beck' },
  { text = 'The most disastrous thing that you can ever learn is your first programming language.', author = 'Daniel Geer' },
  { text = 'The problem is, in software design, often the consequences of your decisions don't become apparent for years.', author = 'Christopher Alexander' },
  { text = 'The central enemy of reliability is complexity.', author = 'G. Steele' },
  { text = 'Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice.', author = 'Kerri Miller' },
  { text = 'Being forced to write comments actually improves code, because it is easier to fix a crock than to explain it.', author = 'Frank Herbert' },
  { text = 'If you're actually doing TDD, you're throwing away tests all the time, as your understanding of what the code is changes.', author = 'Nikola Tesla' },
  { text = 'One of the best things to come out of the home computer revolution could be the general and widespread understanding of how severely limited logic really is.', author = 'Michael J. Saylor' },
  { text = 'We crave for new sensations but soon become indifferent to them. Wonders of yesterday are today common occurrences.', author = 'E. W. Dijkstra' },
  { text = 'I think my software is going to become so ubiquitous, so essential, that if it stops working, there will be riots.', author = 'Marc Randolph' },
  { text = 'The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague.', author = 'Martin Fowler' },
  { text = 'As software began to be sold to people who would never consider themselves technical, it suddenly became clear that you needed people who spoke their language.', author = 'Alan Perlis' },
  { text = 'Dependency Injection is fundamentally about passing dependencies to objects, rather than having objects create or find them.', author = 'Kent Beck' },
  { text = 'Simplicity does not precede complexity, but follows it', author = 'Shaun Wessel' },
  { text = 'Brilliance in a scientist does not consist in being right more often but in being wrong about more interesting topics.', author = 'Andy Hunt' },
  { text = 'Tests should be even more readable then the code they cover', author = 'J. Carmack' },
  { text = 'One broken window, left unrepaired for any substantial length of time, instills in the inhabitants of the building a sense of abandonment—a sense that the powers that be don't care about the building. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short span of time, the building becomes damaged beyond the owner's desire to fix it, and the sense of abandonment becomes reality.', author = 'Aaron Swartz' },
  { text = 'In essence, engineering is doing what you want with what you have.', author = 'Dave Farley' },
  { text = 'Be curious. Read widely. Try new things. I think a lot of what people call intelligence boils down to curiosity.', author = 'Leonardo da Vinci' },
  { text = 'Software engineering is not the same as bridge building, but what most software developers think of as bridge building isn’t like real bridge building, either. This conversation is really a form of confusion between production engineering and design engineering.', author = 'Dave Farley' },
  { text = 'Simplicity is the ultimate sophistication.', author = 'James Gosling' },
  { text = 'Organizing our work into a series of tiny steps gives us more opportunities to reflect on our progress and steer our designs toward better outcomes.', author = 'Alan Kay' },
  { text = 'Simply put, when you have very large pieces of software, most of the tools look at the individual lines of code as text. It is often extremely powerful to look not at individual pieces of code but at a system as a whole.', author = 'Robert C. Martin' },
  { text = 'I hired finishers because I’m a good starter and a poor finisher.', author = 'David Farley' },
  { text = 'A function name should be a verb or a verb phrase, and it needs to be meaningful', author = 'Richard Stallman' },
  { text = 'The earlier you catch defects, the cheaper they are to fix.”', author = 'Kent Beck' },
  { text = 'Fighting patents one by one will never eliminate the danger of software patents, any more than swatting mosquitoes will eliminate malaria.', author = 'Bob Martin' },
  { text = 'Pair programmers: Keep each other on task. Brainstorm refinements to the system. Clarify ideas. Take initiative when their partner is stuck, thus lowering frustration. Hold each other accountable to the team's practices. Pairing', author = 'Terry Baker' },
  { text = 'Obsolete comments tend to migrate away from the code they once described. They become floating islands of irrelevance and misdirection in the code.', author = 'Donald Knuth' },
  { text = 'A program is never less than 90% complete, and never more than 95% complete.', author = 'Martin Fowler' },
  { text = 'Programming is the art of telling another human what one wants the computer to do.', author = 'David May' },
  { text = 'The definition I use for a pattern is an idea that has been useful in one practical context and will probably be useful in others.', author = 'Tom Dale' },
  { text = 'With good program architecture debugging is a breeze, because bugs will be where they should be.', author = 'Martin Fowler' },
  { text = 'If you are choosing a JavaScript library purely based on popularity, I think you deserve what you get.', author = 'Pearl Zhu' },
  { text = 'If someone says their code was broken for a couple of days while they are refactoring, you can be pretty sure they were not refactoring.', author = 'Steve Maguire' },
  { text = 'A programmable mind embraces mental agility, to practice “de-learning” and “relearning” all the time.', author = 'Alan Kay' },
  { text = 'Don't wait until you have a bug to step through your code.', author = 'I Angell' },
  { text = 'The most disastrous thing that you can ever learn is your first programming language.', author = 'Ken Olsen' },
  { text = 'Today, most software exists, not to solve a problem, but to interface with other software.', author = 'Robert Martin' },
  { text = 'On almost anything someone does in the computer business, you can go back in the literature and prove someone had done it earlier.', author = 'Donald Knuth' },
  { text = 'Why do most developers fear to make continuous changes to their code? They are afraid they’ll break it! Why are they afraid they’ll break it? Because they don’t have tests.', author = 'David Parnas' },
  { text = 'Computers are good at following instructions, but not at reading your mind.', author = 'Ka Wai Cheung' },
  { text = 'The only programs that don’t get changed are those that are so bad that nobody wants to use them.', author = 'Will Wright' },
  { text = 'In the end, regardless of where you are on the development hierarchy, keep coding. It’s where you’re most valuable.', author = 'Charles Darwin' },
  { text = 'I'm not saying we purposely introduced bugs or anything, but this is kind of a natural result of any complexities of software... that you can't fully test it.', author = 'Gilad Bracha' },
  { text = 'it is not the most intellectual of the species that survives; it is not the strongest that survives; but the species that survives is the one that is able best to adapt and adjust to the changing environment in which it finds itself.', author = 'Ray Ozzie' },
  { text = 'The wonderful thing about dynamic typing is it lets you express anything that is computable. And type systems don’t. Once you have a type system, you don’t even know what interesting programs are there.', author = 'Edsger W. Dijkstra' },
  { text = 'Bugs are often characteristic of a bad interface between subsystems, frequently a result of inadequate communication among people when they design the subsystems. When a bug is found, there is a tendency to handle it within the subsystem and not look at the program as a whole.', author = 'Edwards Deming' },
  { text = 'The question of whether a computer can think is no more interesting than the question of whether a submarine can swim.', author = 'Kent Beck' },
  { text = 'A bad system will beat a good person every time.', author = 'Rich Hickey' },
  { text = 'Things that change at the same rate belong together. Things that change at different rates belong apart', author = 'Thomas Holaday' },
  { text = 'Most of the biggest problems in software are problems of misconception.', author = 'Kent Beck' },
  { text = 'The fantastic element that explain the appeal of dungeon games to many programmers is neither the fire-breathing monsters nor the milkyskinned, semi-clad sirens; it is the experience of carrying out a task from start to finish without user requirements changing.', author = 'W. A. Wulf' },
  { text = 'The problem with driving development with small scale tests (I call them “unit tests”, but they don’t match the accepted definition of unit tests very well) is that you run the risk of implementing what you think a user wants, but having it turn out to be not what they wanted at all.', author = 'Andrew Hunt' },
  { text = 'More computing sins are committed in the name of efficiency without necessarily achieving it than for any other single reason.', author = 'Alan Kay' },
  { text = 'Don't Gather Requirements, Dig for Them', author = 'Erich Fromm' },
  { text = 'There is the desire of a consumer society to have no learning curves. This tends to result in very dumbed-down products that are easy to get started on, but are generally worthless and/or debilitating.', author = 'Linus Torvalds' },
  { text = 'Education makes machines which act like men and produces men who act like machines', author = 'Andy Hunt' },
  { text = 'Hey, I'm a good software engineer, but I'm not exactly known for my fashion sense. White socks and sandals don't translate to 'good design sense'.', author = 'Wietse Venema' },
  { text = 'DRY - Don't Repeat Yourself - Every piece of knowledge must have a single, unambiguous, athoritative representation within a system.', author = 'Alan Perlis' },
  { text = 'Adding functionality is not just a matter of adding code.', author = 'Phil Simon' },
  { text = 'Computer science is a restless infant and its progress depends as much on shifts in point of view as on the orderly development of our current concepts.', author = 'Tom Wujec' },
  { text = 'Companies should make their own enterprise systems as often as network security companies should manufacture their own aspirin.', author = 'Dave Thomas' },
  { text = 'Software design is a contact sport', author = 'Niklaus Wirth' },
  { text = 'Write shy code — modules that don't reveal anything unnecessary to other modules and that don't rely on other modules' implementations.', author = 'Paul Clements' },
  { text = 'Programming is usually taught by examples.', author = 'Martin Fowler' },
  { text = 'The best software architecture “knows” what changes often and makes that easy.', author = 'John Gall' },
  { text = 'The reason we mention comments here is that comments often are used as a deodorant. It's surprising how often you look at thickly commented code and notice that the comments are there because the code is bad.', author = 'Mikko Hypponen' },
  { text = 'A complex system that works is invariably found to have evolved from a simple system that worked.', author = 'Stan Kelly-Bootle' },
  { text = 'Rarely is anyone thanked for the work they did to prevent the disaster that didn't happen.', author = 'Martin Fowler' },
  { text = 'Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration.', author = 'Alan Kay' },
  { text = 'Not all eyes that notice bugs in Open Source code belong to saints who will report or repair them in the interest of the public good.', author = 'Ken Thompson' },
  { text = 'Sun Microsystems had the right people to make Java into a first-class language, and I believe it was the Sun marketing people who rushed the thing out before it should have gotten out.', author = 'Carl Sagan' },
  { text = 'A well installed microcode bug will be almost impossible to detect.', author = 'Richard M. Stallman' },
  { text = 'Extraordinary claims require extraordinary evidence', author = 'Bjarne Stroustrup' },
  { text = 'Playfully doing something difficult, whether useful or not, that is hacking.', author = 'Ralph Johnson' },
  { text = 'There are only two kinds of languages: the ones people complain about and the ones nobody uses.', author = 'John Carmack' },
  { text = 'The fruit we wish to pick tomorrow lies hidden in the seed of today. The goals we are to read and the problems we are to solve tomorrow depend upon today's diligence, hope and faith, today's conviction of the almightiness of good.', author = 'Steve Jobs' },
  { text = 'The cost of adding a feature isn’t just the time it takes to code it. The cost also includes the addition of an obstacle to future expansion. The trick is to pick the features that don’t fight each other.', author = 'Linus Torvalds' },
  { text = 'Simple can be harder than complex', author = 'P. J. O'Rourke' },
  { text = 'Non-technical questions sometimes don't have an answer at all.', author = 'Donald Knuth' },
  { text = 'Giving pointers and threads to programmers is like giving whisky and car keys to teenagers.', author = 'Robert C. Martin' },
  { text = 'Science is what we understand well enough to explain to a computer, Art is all the rest', author = 'Martin Fowler' },
  { text = 'Programmers must avoid leaving false clues that obscure the meaning of code.', author = 'Linus Torvalds' },
  { text = 'Time invested in writing tests and refactoring delivers impressive returns in delivery speed, and Continuous Integration is a core part of making that work in a team setting', author = 'Danny Thorpe' },
  { text = 'People enjoy the interaction on the Internet, and the feeling of belonging to a group that does something interesting: that's how some software projects are born.', author = 'Roedy Green' },
  { text = 'Programming without an overall architecture or design in mind is like exploring a cave with only a flashlight: You don't know where you've been, you don't know where you're going, and you don't know quite where you are.', author = 'Harold Abelson' },
  { text = 'The cardinal rule of writing unmaintainable code is to specify each fact in as many places as possible and in as many ways as possible.', author = 'James Gosling' },
  { text = 'Programs must be written for people to read, and only incidentally for machines to execute.', author = 'Alan Kay' },
  { text = 'For us, the real goal is to make it so that the software ecosystem is as healthy as possible.', author = 'Martin Fowler' },
  { text = 'The computer is simply an instrument whose music is ideas.', author = 'Ken Blanchard' },
  { text = 'When you actually sit down to write some code, you learn things that you didn’t get from thinking about them in modeling terms…there is a feedback process there that you can only really get at from executing some things and seeing what works.', author = 'Steve C. McConnell' },
  { text = 'Feedback is the breakfast of champions.', author = 'William L. McKnight' },
  { text = 'The problem with quick and dirty, is that the dirty remains long after the quick has been forgotten', author = 'Martin Fowler' },
  { text = 'If you put fences around people, you get sheep. GIve people the room they need.', author = 'Don Knuth' },
  { text = 'I think another good principle is separating presentation or user interface (UI) from the real essence of what your app is about. By following that principle I have gotten lucky with changes time and time again. So I think that's a good principle to follow.', author = 'Tim Berners-Lee' },
  { text = 'These machines have no common sense; they have not yet learned to "think," and they do exactly as they are told, no more and no less. This fact is the hardest concept to grasp when one first tries to use a computer.', author = 'Kent Beck' },
  { text = 'Whatever the device you use for getting your information out, it should be the same information.', author = 'Joshua Bloch' },
  { text = 'Whether you draw diagrams that generate code or you type at a browser, you are coding.', author = 'André Bensoussan' },
  { text = 'If an object is immutable, it can be in only one state, and you win big..', author = 'Meilir Page-Jones' },
  { text = 'If you make a general statement, a programmer says, 'Yes, but...' while a designer says, 'Yes, and...'', author = 'Dave Farley' },
  { text = 'Software is Too Important to be Left to Programmers.', author = 'Donald E. Knuth' },
  { text = 'If you can improve just one thing in your software development, make it getting faster feedback.', author = 'Tim Kadlec' },
  { text = 'I get into the meanest, nastiest frame of mind I can manage, and I write the nastiest (testing) code I can think of. Then I turn around and embed that in even nastier constructions that are nearly obscene.', author = 'Adrian Cockcroft' },
  { text = 'Blame the implementation, not the technique.', author = 'Martin Fowler' },
  { text = 'Get out of the way of your developers or lose them to someone who will.', author = 'Michael Feath' },
  { text = 'In almost all cases, I’m opposed to setting aside time for refactoring. In my view refactoring is not an activity you set aside time to do. Refactoring is something you do all the time in little bursts.', author = 'Seymour Cray' },
  { text = 'Every Time you Encounter a Testability Problem, there’s an Underlying Design Problem', author = 'Bjarne Stroustrup' },
  { text = 'Memory is like an orgasm. It's a lot better if you don't have to fake it.', author = 'Martin Fowler' },
  { text = 'The most important single aspect of software development is to be clear about what you are trying to build.', author = 'Verity Stob' },
  { text = 'If you're a technical lead, you need to be coding.', author = 'Don Knuth' },
  { text = 'The primary duty of an exception handler is to get the error out of the lap of the programmer and into the surprised face of the user.', author = 'Sergey Zefirov' },
  { text = 'Email is a wonderful thing for people whose role in life is to be on top of things. But not for me; my role is to be on the bottom of things. What I do takes long hours of studying and uninterruptible concentration', author = 'Alan Perlis' },
  { text = 'A bug is never just a mistake. It represents something bigger.', author = 'Erich Gamma' },
  { text = 'You can't communicate complexity, only an awareness of it.', author = 'Fred Brooks' },
  { text = 'The Visitor pattern is a way to add new operations to a set of objects without changing their classes.', author = 'C.A.R. Hoare' },
  { text = 'Einstein repeatedly argued that there must be simplified explanations of nature, because God is not capricious or arbitrary. No such faith comforts the software engineer.', author = 'Robert C. Martin' },
  { text = 'The most important property of a program is whether it accomplishes the intention of its user.', author = 'Andrew S. Tanenbaum' },
  { text = 'Inheritance is good, but you should never forget that it introduces tight coupling.', author = 'Leslie Lamport' },
  { text = 'A refund for defective software might be nice, except it would bankrupt the entire software industry in the first year.', author = 'John Ruskin' },
  { text = 'A distributed system is one in which the failure of a computer you didn't even know existed can render your own computer unusable.', author = 'John Maeda' },
  { text = 'Quality is never an accident; it is always the result of intelligent effort.', author = 'Nietzsche' },
  { text = 'Simplicity is about subtracting the obvious and adding the meaningful.', author = 'Margaret H. Hamilton' },
  { text = 'He who fights with monsters might take care lest he thereby become a monster. And if you gaze for long into an abyss, the abyss gazes also into you.', author = 'Sam Altman' },
  { text = 'Software eventually and necessarily gained the same respect as any other discipline.', author = 'Jeff Polk' },
  { text = 'If it takes more than a sentence to explain what you are doing, it’s almost always a sign that what you are doing is too complicated.', author = 'David West' },
  { text = 'There’s no obfuscated Perl contest because it’s pointless.', author = 'Martin Fowler' },
  { text = 'Programming languages are concrete manifestations of a set of values, ideals, and goals, which in turn reflect a more inclusive worldview or philosophical context.', author = 'Steve Klabnik' },
  { text = 'One of the things I've been trying to do is look for simpler or rules underpinning good or bad design. I think one of the most valuable rules is avoiding duplication. "Once and only once" is the Extreme Programming phrase.', author = 'Daniel Boorstin' },
  { text = 'Subclasses shouldn’t always share all characteristics of their parent class but will do so with inheritance. This can make a program’s design less flexible. It also introduces the possibility of calling methods on subclasses that don’t make sense or that cause errors because the methods don’t apply to the subclass.', author = 'Alan Kay' },
  { text = 'The greatest obstacle to discovery is not ignorance, but the illusion of knowledge.', author = 'Grady Booch' },
  { text = 'The most disastrous thing that you can ever learn is your first programming language.', author = 'Michael Nygard' },
  { text = 'In 2031, lawyers will be commonly a part of most development teams.', author = 'Kent Beck' },
  { text = 'Everything will ultimately fail. Hardware is fallible, so we add redundancy. This allows us to survive individuals hardware failures, but increases the likelihood of having at least one failure at any given time.', author = 'Douglas Crockford' },
  { text = 'I found out that most programmers don't like to test their software as intensely as I do.', author = 'Peter Drucker' },
  { text = 'Programmers are as emotional and irrational as normal people.', author = 'Alan J. Perlis' },
  { text = 'There is nothing so useless as doing efficiently that which should not be done at all.', author = 'Fred Brooks' },
  { text = 'It is easier to write an incorrect program than understand a correct one', author = 'Dennis Ritchie' },
  { text = 'All programmers are optimists.', author = 'D. Vargas' },
  { text = 'Computer science research is different from these more traditional disciplines. It differs from the physical sciences because it seeks not to discover, explain, or exploit the natural world, but instead to study the properties of machines of human creation', author = 'Robert C. Martin' },
  { text = 'It's easy to cry "bug" when the truth is that you've got a complex system and sometimes it takes a while to get all the components to co-exist peacefully.', author = 'Alan Perlis' },
  { text = 'The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that.', author = 'Michio Kaku' },
  { text = 'A language that doesn’t affect the way you think about programming, is not worth knowing.', author = 'Melvin Conway' },
  { text = 'You can mass-produce hardware; you cannot mass-produce software; you cannot mass-produce the human mind.', author = 'Kent Beck' },
  { text = 'Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.', author = 'Andrew Carnegie' },
  { text = 'Optimism is an occupational hazard of programming: feedback is the treatment.', author = 'James Charlton' },
  { text = 'The most delicate and the most essential piece of mechanism that a man has to deal with is the human machine.', author = 'Nicholas Zakas' },
  { text = 'Don't waste time learning the "tricks of the trade." Instead, learn the trade.', author = 'Francis Glassborow' },
  { text = 'The key is to acknowledge from the start that you have no idea how this will grow. Accepting that you don't know everything, you begin to design the system defensively... You should spend most of your time thinking about interfaces rather than implementations.",', author = 'David Wheeler' },
  { text = 'Good programmers use their brains, but good guidelines save us having to think out every case.', author = 'John Woods' },
  { text = 'Compatibility means deliberately repeating other people's mistakes.', author = 'Martin Fowler' },
  { text = 'Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.', author = 'Bertrand Meyer' },
  { text = 'You have to refactor when you run into ugly code—but excellent code needs plenty of refactoring too.', author = 'Leslie Lamport' },
  { text = 'Bubbles don't crash.', author = 'Larry Wall' },
  { text = 'Coding is about writing code while programming is coding and thinking', author = 'Ian Stewart' },
  { text = 'Hubris: Excessive pride, the sort of thing Zeus zaps you for. Also the quality that makes you write (and maintain) programs that other people won’t want to say bad things about. Hence, the third great virtue of a programmer', author = 'Fred Brooks' },
  { text = 'Both real and imaginary numbers have exactly the same logical status. They are human concepts that model reality, but they are not themselves real', author = 'Stephen Fry' },
  { text = 'Successful software always gets changed.', author = 'Alan Cooper' },
  { text = 'We are not nouns, we are verbs. I am not a thing - an actor, a writer - I am a person who does things - I write, I act - and I never know what I'm going to do next. I think you can be imprisoned if you think of yourself as a noun.', author = 'Richard Dalton' },
  { text = 'If we want users to like our software, we should design it to behave like a likeable person.', author = 'Lehman’s law of Increasing Complexity' },
  { text = 'Teams are immutable. Every time someone leaves, or joins, you have a new team, not a changed team.', author = 'Ron Jeffries' },
  { text = 'As a program is evolved its complexity increases unless work is done to maintain or reduce it.', author = 'Leopold Kronecker' },
  { text = 'The lesson is: Even if you know exactly what is going on in your system, measure performance, don't speculate. You'll learn something, and nine times out of ten, it won't be that you were right!', author = 'Neal Ford' },
  { text = 'God made the natural numbers; all else is the work of man.', author = 'David West' },
  { text = 'Don't try to find the best design in software architecture , instead , strive for the least worst combination of trade-offs', author = 'Dave Farley' },
  { text = 'We know an object by what it does, by what services it can provide. That is to say, we know objects by their behaviors.', author = 'Rob Pike' },
  { text = 'Software engineering is not the same thing as computer science, though we often confuse the two. We need both software engineers and computer scientists.', author = 'Martin Fowler' },
  { text = 'Languages that try to disallow idiocy become themselves idiotic.', author = 'Alistair Cockburn' },
  { text = 'A heuristic we follow is that whenever we feel the need to comment something, we write a method instead.', author = 'Kent Beck' },
  { text = 'We are still in the infancy of naming what is really happening on software development projects.', author = 'Stewart Butterfield' },
  { text = 'Thinking about my experience of modifying code, I see that I spend much more time reading the existing code than I do writing new code. If I want to make my code cheap, therefore, I should make it easy to read.', author = 'Alan Turing' },
  { text = 'In software design, it's all about making a guess, trying it, and then learning from the experience.', author = 'Peter Van Roy' },
  { text = 'Programming is a skill best acquired by practice and example rather than from books', author = 'Alan Perlis' },
  { text = 'Static typing is to reliable programming what a spelling checker is to a good writer.', author = 'Robert Martin' },
  { text = 'If you have a procedure with ten parameters, you probably missed some.', author = 'Peter Deustch' },
  { text = 'Redundant comments are just places to collect lies and misinformation.', author = 'Charles Eames' },
  { text = 'My belief is still, if you get the data structures and their invariants right, most of the code will kind of write itself.', author = 'Steve Swartz' },
  { text = 'Recognizing the need is the primary condition for design.', author = 'Benjamin Franklin' },
  { text = 'When you are stuck in a traffic jam with a Porsche, all you do is burn more gas in idle. Scalability is about building wider roads, not about building faster cars.', author = 'Steve McConnell' },
  { text = 'Watch the little things; a small leak will sink a great ship.', author = 'Martin Fowler' },
  { text = 'Good code is its own best documentation.', author = 'Michael C. Feathers' },
  { text = 'If you have to spend effort looking at a fragment of code and figuring out what it’s doing, then you should extract it into a function and name the function after the what.', author = 'Jeff Atwood' },
  { text = 'Remember, code is your house, and you have to live in it.', author = 'Blair Houghton' },
  { text = 'No one hates software more than software developers.', author = 'Dick Fairley' },
  { text = 'Come to think of it, there are already a million monkeys on a million typewriters, and Usenet is nothing like Shakespeare.', author = 'Jason Fried' },
  { text = 'Skilled and motivated programmers can overcome inadequate processes, but perfect processes can never compensate for inadequate programmers or poor software managers.', author = 'Jon Evans' },
  { text = 'A good enough first version will take longer to produce with $170K than it would have with $0K.', author = 'Alan Perlis' },
  { text = 'I'm a victim of Developaralysis: the crippling sense that the software industry is evolving so fast that no one person can possibly keep up.', author = 'Robert Martin' },
  { text = 'Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.', author = 'Andrew S. Tannenbaum' },
  { text = 'No matter how slow you are writing clean code, you will always be slower if you make a mess.', author = 'J Barnes' },
  { text = 'The nice thing about standards is that there are so many to choose from.', author = 'Marie Kondo' },
  { text = 'Playing with pointers is like playing with fire. Fire is perhaps the most important tool known to man. Carefully used, fire brings enormous benefits; but when fire gets out of control, disaster strikes.', author = 'Wietse Venema' },
  { text = 'The objective of cleaning is not just to clean, but to feel happiness living within that environment.', author = 'Anders Hejlsberg' },
  { text = 'When I write software, I know that it will fail, either due to my own mistake, or due to some other cause.', author = 'Bertrand Meyer' },
  { text = 'The billion dollar mistake of having null in the language. And since JavaScript has both null and undefined, it's the two billion dollar mistake.', author = 'Joel Spolsky' },
  { text = 'Objects are there for the picking.', author = 'Ray Ozzie' },
  { text = 'It’s harder to read code than to write it.', author = 'Niklaus Wirth' },
  { text = 'Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build and test, it introduces security challenges, and it causes end-user and administrator frustration.', author = 'Martin Fowler' },
  { text = 'Clearly, programming courses should teach methods of design and construction, and the selected examples should be such that a gradual development can be nicely demonstrated.', author = 'Dennis Ritchie' },
  { text = 'Spaghetti code is a program with its logic tangled like spaghetti. Avoid the tangles, and you simplify your life.', author = 'Chuck Palahniuk' },
  { text = 'Twenty percent of all input forms filled out by people contain bad data.', author = 'David Walker' },
  { text = 'That's why I write, because life never works except in retrospect. You can't control life, at least you can control your version.', author = 'Jon Bentley' },
  { text = 'If you get tired of writing for loops, take a break and continue later.', author = 'Robert C. Martin' },
  { text = 'The most beautiful code, the most beautiful functions, and the most beautiful programs are sometimes not there at all.', author = 'Robert Martin' },
  { text = 'The proper use of comments is to compensate for our failure to express ourselves in code.', author = 'Stephane Nappo' },
  { text = 'It is not the language that makes programs appear simple. It is the programmer that make the language appear simple.', author = 'Dave Farley' },
  { text = 'It takes 20 years to build a reputation and a few minutes of cyber-incident to ruin it.', author = 'Ward Cunningham' },
  { text = 'Instead of working on a feature until it is “finished”, CI and its big brother CD demand of us to make changes in small steps and have something ready for use after every small step. This changes how we think about the design of our system in some important ways.', author = 'Fred Brooks' },
  { text = 'When you add testing flags, you undermine confidence in production.', author = 'Andy Hunt' },
  { text = 'Scientists build to learn; Engineers learn to build.', author = 'Mark Berry' },
  { text = 'Don't Live with Broken Windows', author = 'Jeff Atwood' },
  { text = 'Programmers don't burn out on hard work, they burn out on change-with-the-wind directives and not 'shipping'.', author = 'Joshua Bloch' },
  { text = 'We have to stop optimizing for programmers and start optimizing for users.', author = 'Alan Kay' },
  { text = 'It is hard to write even the smallest piece of code correctly.', author = 'Norman Ralph Augustine' },
  { text = 'I would suggest an approach to an eventual “really nice” statically typed language by first making a dynamic language that can use objects as “semantic type definers and guards” to be installed in variables and to make a number of sample systems with it to find what level of static type-safety really pays for itself, and to then do co-evolution passes to get the dynamic types in good enough semantic shape so that all (or most) of what they do dynamically can be done at code writing time.', author = 'Isaac Asimov' },
  { text = 'The optimum committee has no members.', author = 'Joshua Bloch' },
  { text = 'I do not fear computers. I fear lack of them.', author = 'Bjarne Stroustrup' },
  { text = 'Learning the art of programming, like most other disciplines, consists of first learning the rules and then learning when to break them.', author = 'David Gelernter' },
  { text = 'An organization that treats its programmers as morons will soon have programmers that are willing and able to act like morons only.', author = 'Joseph Weizenbaum' },
  { text = 'If you have three pet dogs, give them names. If you have 10,000 head of cattle, don't bother. Nowadays, the idea of giving a name to every file on your computer is ridiculous.', author = 'Erich Gamma' },
  { text = 'The computer programmer is a creator of universes for which he alone is the lawgiver. No playwright, no stage director, no emperor, however powerful, has exercised such absolute authority to arrange a stage or field of battle.', author = 'Barry Boehm' },
  { text = 'Design patterns should not be applied indiscriminately. Often they achieve flexibility and variability by introducing additional levels of indirection. A design pattern should only be applied when the flexibility it affords is actually needed.', author = 'Cem Kaner' },
  { text = 'Agile methods derive much of their agility by relying on the tacit knowledge embodied in the team, rather than writing the knowledge down in plans.', author = 'Robert Martin' },
  { text = 'A program which perfectly meets a lousy specification is a lousy program.', author = 'Douglas Crockford' },
  { text = 'Error handling is important, but if it obscures logic, it’s wrong.', author = 'Richard Pattis' },
  { text = 'It would be nice if products and programming languages were designed to have only good parts.', author = 'Doug Linder' },
  { text = 'When debugging, novices insert corrective code; experts remove defective code.', author = 'Dan Hurvitz' },
  { text = 'A good programmer is someone who always looks both ways before crossing a one-way street.', author = 'Joshua Bloch' },
  { text = 'Alzheimer's Law of Programming: Looking at code you wrote more than two weeks ago is like looking at code you are seeing for the first time.', author = 'Paul Graham' },
  { text = 'The cleaner and nicer the program, the faster it's going to run. And if it doesn't, it'll be easy to make it fast.', author = 'Karolina Szczur' },
  { text = 'The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code.', author = 'Alan Bennett' },
  { text = 'Writing software as if we are the only person that ever has to comprehend it is one of the biggest mistakes and false assumptions that can be made.', author = 'Martin Fowler' },
  { text = 'Standards are always out of date. That’s what makes them standards.', author = 'Norman R. Augustine' },
  { text = 'The best smells are something that's easy to spot and most of time lead you to really interesting problems. Data classes (classes with all data and no behavior) are good examples of this. You look at them and ask yourself what behavior should be in this class.', author = 'Larry Bossidy' },
  { text = 'The most unsuccessful three years in the education of cost estimators appears to be fifth-grade arithmetic.', author = 'Norm Schryer' },
  { text = 'Complexity has nothing to do with intelligence, simplicity does.', author = 'Alan Turing' },
  { text = 'If the code and the comments disagree, then both are probably wrong.', author = 'Alan Perlis' },
  { text = 'Those who can imagine anything, can create the impossible', author = 'Chisel Wright' },
  { text = 'I think it is inevitable that people program poorly. Training will not substantially help matters. We have to learn to live with it.', author = 'Olin Shivers' },
  { text = 'My computer's so fast it finishes an infinite loop in 5 minutes.', author = 'Grady Booch' },
  { text = 'I object to doing things that computers can do.', author = 'Robert C. Martin' },
  { text = 'The amateur software engineer is always in search of magic.', author = 'Scott Guthrie' },
  { text = 'Truth can only be found in one place: the code.', author = 'M. Ritchie' },
  { text = 'The benefits of a truly effective new technology are foregone when, in the rush to try out the next shiny whiz-bang tool, we abandon the current one.', author = 'Andrew Hunt and David Thomas' },
  { text = 'A language that doesn’t have everything is actually easier to program in than some that do." ~ Dennis', author = 'J. Chambers' },
  { text = 'It's not at all important to get it right the first time. It's vitally important to get it right the last time.', author = 'Donald Knuth' },
  { text = 'Prolific developers don’t always write a lot of code, instead they solve a lot of problems. The two things are not the same.', author = 'Alan J. Perlis' },
  { text = 'Programs are meant to be read by humans and only incidentally for computers to execute.', author = 'Wietse Venema' },
  { text = 'A programming language is low level when its programs require attention to the irrelevant.', author = 'Martin Fowler' },
  { text = 'This will surprise some of your readers, but my primary interest is not with computer security. I am primarily interested in writing software that works as intended.', author = 'Pierce Brown' },
  { text = 'The secret to fast software, in all but hard real-time contexts, is to write tunable software first and then tune it for sufficient speed.', author = 'Robert Martin' },
  { text = 'You will fall to ruin because you believe that exceptions to the rule make new rules.', author = 'Austin Freeman' },
  { text = 'Every time you write a comment, you should grimace and feel the failure of your ability of expression', author = 'Michel Gauthier' },
  { text = 'Simplicity is the soul of efficiency.', author = 'Erich Gamma' },
  { text = 'Inheritance is surely a good answer but who knows the questions?', author = 'Kreitzberg & Shneiderman' },
  { text = 'Favor object composition over class inheritance.', author = 'Ryan Singer' },
  { text = 'Programming can be fun, so can cryptography; however they should not be combined.', author = 'Peter Drucker' },
  { text = 'So much complexity in software comes from trying to make one thing do two things.', author = 'Jeff Sickel' },
  { text = 'Effective leadership is not about making speeches or being liked; leadership is defined by results not attributes.', author = 'Martin Fowler' },
  { text = 'Deleted code is debugged code.', author = 'Robert Martin' },
  { text = 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', author = 'Brian Kernighan' },
  { text = 'The ratio of time spent reading (code) versus writing is well over 10 to 1 ... (therefore) making it easy to read makes it easier to write.', author = 'Brian Goetz' },
  { text = 'Another effective technique is to explain your code to someone else. This will often cause you to explain the bug to yourself. Sometimes it takes no more than a few sentences, followed by an embarrassed "Never mind, I see what's wrong. Sorry to bother you."', author = 'Kent Beck' },
  { text = 'Just as it is a good practice to make all fields private unless they need greater visibility, it is a good practice to make all fields final unless they need to be mutable.', author = 'Antoine de Saint Exupéry' },
  { text = 'Rather than apply minutes of suspect reasoning, we can just ask the computer by making the change and running the tests.', author = 'Tony Hoare' },
  { text = 'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.', author = 'Eagleson’s Law' },
  { text = 'A single human brain has about a hundred million nerve cells... and a computer program that throws light on the mind/brain problem will have to incorporate the deepest insights of biologists, nerve scientists, psychologists, physiologists, linguists, social scientists, and even philosophers.', author = 'Yegor Bugayenko' },
  { text = 'Any code of your own that you haven’t looked at for six or more months might as well have been written by someone else.', author = 'Larry Wall' },
  { text = 'Automated testing is a safety net that protects the program from its programmers.', author = 'Karen Spärck Jones' },
  { text = 'One day my daughter came in, looked over my shoulder at some Perl 4 code, and said, "What is that, swearing?"', author = 'James Bach' },
  { text = 'I think it's very important to get more women into computing. My slogan is: Computing is too important to be left to men.', author = 'Walter O'Brien' },
  { text = 'It´s more about good enough than it is about right or wrong.', author = 'Andrew Hunt' },
  { text = 'The methodologies and best practices used to develop software can be applied successfully to any challenge in life.', author = 'Brian Kernighan' },
  { text = 'No one in the brief history of computing has ever written a piece of perfect software. It's unlikely that you'll be the first.', author = 'Robert Martin' },
  { text = 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.', author = 'Jamie Zawinski' },
  { text = 'If you say “I told you so”, you are the one who has failed. Because you knew, but did not manage to stop the train wreck.', author = 'Brian Kernighan' },
  { text = 'Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.', author = 'Cory House' },
  { text = 'Don’t comment bad code — rewrite it.', author = 'Martin Fowler' },
  { text = 'Code is like humor. When you have to explain it, it’s bad.', author = 'Robert Martin' },
  { text = 'If you do a big bang rewrite, the only thing you're certain of is a big bang', author = 'Linus Torvalds' },
  { text = 'A long descriptive name is better than a short enigmatic name. A long descriptive name is better than a long descriptive comment.', author = 'Don Laabs' },
  { text = 'Talk is cheap. Show me the code.', author = 'Don Knuth' },
  { text = 'Code should be written to be read by humans first, and machines second.', author = 'Eric Raymond' },
  { text = 'The language in which we express our ideas has a strong influence on our thought processes.', author = 'Michael Feathers' },
  { text = 'Smart data structures and dumb code works a lot better than the other way around.', author = 'J T Wall' },
  { text = 'Legacy code is code without tests.', author = 'Donald Knuth' },
  { text = 'Regardless of your plans, production is the ultimate testing environment.', author = 'Tom Cargill' },
  { text = 'Somebody will say they have a program that’s verified and it’s only verified because it met its specification according to some verifier. But the verifier might have bugs in it. The specifications might have bugs in them', author = 'Chris Sacca' },
  { text = 'The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time', author = 'Jessica Gaston' },
  { text = 'Simplicity is hard to build, easy to use, and hard to charge for. Complexity is easy to build, hard to use, and easy to charge for.', author = 'Tim O'Reilly' },
  { text = 'One man's crappy software is another man's full time job.', author = 'Boris Beizer' },
  { text = 'We're entering a new world in which data may be more important than software.', author = 'H. W. Kenton' },
  { text = 'The pesticide paradox. Every method you use to prevent or find bugs leaves a residue of subtler bugs against which those methods are ineffective.', author = 'Nicoll Hunt' },
  { text = ''Don't fix it if it ain't broke' presupposed that you can't improve something that works reasonably well already. If the world's inventors had believed this, we'd still be driving Model A Fords and using outhouses.', author = 'Joel Spolsky' },
  { text = 'The first step of any project is to grossly underestimate its complexity and difficulty.', author = 'Mike Johnson' },
  { text = 'Good software, like wine, takes time.', author = 'George E. P. Box' },
  { text = 'Pasting code from the internet into production code is like chewing gum found in the street.', author = 'Cem Kaner' },
  { text = 'Discovering the unexpected is more important than confirming the known.', author = 'Kent Beck' },
  { text = 'Pay attention to zeros. If there is a zero, someone will divide by it.', author = 'Donald Knuth' },
  { text = 'Beta testing is a symptom of weak testing practices and poor communication with customers', author = 'Alan Page' },
  { text = 'Beware of bugs in the above code; I have only proved it correct, not tried it.', author = 'Jon Franklin' },
  { text = 'The key to building a great product is building a great team first. To me, great teams aren’t bound by roles, but they’re driven by moving forward.', author = 'Michael Feathers' },
  { text = 'Simplicity, carried to the extreme, becomes elegance.', author = 'P. J. Plauger' },
  { text = 'With tests, we can change the behavior of our code quickly and verifiably. Without them, we really don’t know if our code is getting better or worse.”', author = 'Bertrand Meyer' },
  { text = 'Don't patch bad code - rewrite it.', author = 'Larry Wall' },
  { text = 'Correctness is clearly the prime quality. If a system does not do what it is supposed to do, then everything else about it matters little.', author = 'Robert Martin' },
  { text = 'A Perl program is correct if it gets the job done before your boss fires you.', author = 'Amit Kalantri' },
  { text = 'As the Tests get more Specific, the Code gets more Generic.', author = 'Joshua Bloch' },
  { text = 'Software testing is not only ensuring absence of bugs but also ensuring presence of value.', author = 'DeMarco and Lister' },
  { text = 'When you choose a language, you're choosing more than a set of technical trade-offs-you're choosing a community.', author = 'Kent Beck' },
  { text = 'Quality is free, but only to those who are willing to pay heavily for it.', author = 'Steve McConnell' },
  { text = 'Developer testing is an important step towards accountability. It gives developers a way to demonstrate the quality of the software they produce.', author = 'Josh Flachsbart' },
  { text = 'It’s hard enough to find an error in your code when you’re looking for it; its even harder when you’ve assumed your code is error-free.', author = 'Steve Maguire' },
  { text = 'On the seventh day, God said, "Ship it! We'll release patches later."', author = 'Michael Feathers' },
  { text = 'Make it hard to ignore error conditions. Don't bury error codes in return values.', author = 'Kelsey Hightower' },
  { text = 'One of the most valuable things about TDD is that it lets us concentrate on one thing at a time. We are either writing code or refactoring; we are never doing both at once.', author = 'Alan Cooper' },
  { text = 'You haven't mastered a tool until you understand when it should not be used.', author = 'Marissa Mayer' },
  { text = 'Reducing a product's definition to a list of features and functions ignores the real opportunity - orchestrating technological capability to serve human needs and goals.', author = 'Rebecca Wirf Brooks' },
  { text = 'Beyond basic mathematical aptitude, the difference between good programmers and great programmers is verbal ability.', author = 'Robert Firth' },
  { text = 'We argue that design practices which take a data-driven approach fail to maximize encapsulation because they focus too quickly on the implementation of objects. We propose an alternative object-oriented design method which takes a responsibility-driven approach.', author = 'Boris Beizer' },
  { text = '.. one of the main causes of the fall of the Roman Empire was that, lacking zero, they had no way to indicate successful termination of their C programs.', author = 'Robert Martin' },
  { text = 'Software never was perfect and won’t get perfect. But is that a license to create garbage? The missing ingredient is our reluctance to quantify quality.', author = 'Steve McConnell' },
  { text = 'Nothing makes a system more flexible than a suite of tests.', author = 'Harlan D. Mills' },
  { text = 'Good code is its own best documentation. As you're about to add a comment, ask yourself, 'How can I improve the code so that this comment isn't needed?'', author = 'Martin Fowler' },
  { text = 'Programming is similar to a game of golf. The point is not getting the ball in the hole but how many strokes it takes.', author = 'David Parnas' },
  { text = 'If you’re afraid to change something it is clearly poorly designed.', author = 'Alan J. Perlis' },
  { text = 'As a rule, software systems do not work well until they have been used, and have failed repeatedly, in real applications.', author = 'Martin Fowler' },
  { text = 'There are two ways to write error-free programs; only the third one works.', author = 'Marijn Haverbeke' },
  { text = 'Whenever I have to think to understand what the code is doing, I ask myself if I can refactor the code to make that understanding more immediately apparent.', author = 'Daniel Read' },
  { text = 'The art of programming is the skill of controlling complexity. ', author = 'Neal Ford' },
  { text = 'A true professional does not waste the time and money of other people by handing over software that is not reasonably free of obvious bugs; that has not undergone minimal unit testing; that does not meet the specifications and requirements; that is gold-plated with unnecessary features; or that looks like junk.', author = 'Grady Booch' },
  { text = 'Everything in software architecture is a trade-off.', author = 'Alan Kay' },
  { text = 'Let there be no doubt that object-oriented design is fundamentally different than traditional structured design approaches: it requires different ways of thinking about decomposition, and it produces software architectures that are largely outside the realm of the structured design culture.', author = '' },
  { text = 'I invented the term ‘object-oriented’, and C++ was not what I had in mind.', author = '' },
}
